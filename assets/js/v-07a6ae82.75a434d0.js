"use strict";(self.webpackChunkandroid_docs=self.webpackChunkandroid_docs||[]).push([[4532],{5506:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-07a6ae82","path":"/kotlin-tutor/scope-fun.html","title":"scope","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"createdTime":1667993962000,"updatedTime":1667993962000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"kotlin-tutor/scope-fun.md","localizedDate":"2022年11月9日","excerpt":""}')},8893:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(6252);const p=[(0,t.uE)('<h1 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> scope</h1><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code> \n\n \n<span class="token keyword">class</span> ScopeFun <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">customPrint</span><span class="token punctuation">(</span>s<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//let 函数把当前对象作为闭包的 it 参数，返回值是函数里面最后一行，或者指定 return</span>\n    <span class="token comment">//let 函数跟 run 函数的区别是：let 函数在函数内可以通过 it 指代该对象</span>\n    <span class="token annotation builtin">@Test</span>\n    <span class="token keyword">fun</span> <span class="token function">letFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">val</span> empty <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>               <span class="token comment">// 1</span>\n            <span class="token function">customPrint</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>                    <span class="token comment">// 2</span>\n            it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment">// 3</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot; is empty: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">empty</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//run 函数类似于 apply 函数，但是 run 函数返回的是最后一行的值</span>\n    <span class="token annotation builtin">@Test</span>\n    <span class="token keyword">fun</span> <span class="token function">runFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">fun</span> <span class="token function">getNullableLength</span><span class="token punctuation">(</span>ns<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;for \\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ns</span></span><span class="token string">\\&quot;:&quot;</span></span><span class="token punctuation">)</span>\n            ns<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>                                                  <span class="token comment">// 1</span>\n                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\tis empty? &quot;</span></span> <span class="token operator">+</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">// 2</span>\n                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\tlength = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">length</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n                length                                                 <span class="token comment">// 3</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">getNullableLength</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token function">getNullableLength</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token function">getNullableLength</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;some string with Kotlin&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//with函数会把对象结构,可以直接使用对象的属性</span>\n    <span class="token annotation builtin">@Test</span>\n    <span class="token keyword">fun</span> <span class="token function">withFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">val</span> configuration <span class="token operator">=</span> <span class="token function">Configuration</span><span class="token punctuation">(</span>host <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;127.0.0.1&quot;</span></span><span class="token punctuation">,</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">)</span>\n\n        <span class="token function">with</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;with scope</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">host</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">port</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// instead of:</span>\n        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">configuration<span class="token punctuation">.</span>host</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">configuration<span class="token punctuation">.</span>port</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//apply 函数是指在函数块内可以通过 this 指代该对象，返回值为该对象自己</span>\n    <span class="token annotation builtin">@Test</span>\n    <span class="token keyword">fun</span> <span class="token function">applyFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n        <span class="token keyword">val</span> jake <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token comment">// 1</span>\n        <span class="token keyword">val</span> stringDescription <span class="token operator">=</span> jake<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>                    <span class="token comment">// 2</span>\n            name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Jake&quot;</span></span>                                       <span class="token comment">// 3</span>\n            age <span class="token operator">=</span> <span class="token number">30</span>\n\n        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                            <span class="token comment">// 4</span>\n        <span class="token function">println</span><span class="token punctuation">(</span>stringDescription<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token comment">//also 对于执行一些将上下文对象作为参数的操作很有用。 对于需要引用对象而不是其属性与函数的操作，或者不想屏蔽来自外部作用域的 this 引用时，请使用 als</span>\n    <span class="token annotation builtin">@Test</span>\n    <span class="token keyword">fun</span> <span class="token function">alsoFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">val</span> jake <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Jake&quot;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Android developer&quot;</span></span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>\n            <span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>                                          <span class="token comment">// 2</span>\n                <span class="token function">writeCreationLog</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>                         <span class="token comment">// 3</span>\n            <span class="token punctuation">}</span>\n        <span class="token function">println</span><span class="token punctuation">(</span>jake<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)],e={},o=(0,a(3744).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);