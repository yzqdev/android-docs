"use strict";(self.webpackChunkandroid_docs=self.webpackChunkandroid_docs||[]).push([[6041],{3578:(o,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a=JSON.parse('{"key":"v-c7dcd046","path":"/hybrid/uniapp/tips.html","title":"一些小技巧","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"关于生命周期","slug":"关于生命周期","link":"#关于生命周期","children":[]}],"git":{"createdTime":1674222943000,"updatedTime":1674222943000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.15,"words":346},"filePathRelative":"hybrid/uniapp/tips.md","localizedDate":"2023年1月20日","excerpt":""}')},2284:(o,e,n)=>{n.r(e),n.d(e,{default:()=>i});var a=n(6252);const d=[(0,a.uE)('<h1 id="一些小技巧" tabindex="-1"><a class="header-anchor" href="#一些小技巧" aria-hidden="true">#</a> 一些小技巧</h1><h2 id="关于生命周期" tabindex="-1"><a class="header-anchor" href="#关于生命周期" aria-hidden="true">#</a> 关于生命周期</h2><p>一、onLoad 只加载一次，监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参）</p><p>二、onShow 监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面。</p><p>主要区别： 从二级页面返回该页面时，onLoad不会再次加载，而onshow会重新加载。</p><p>这点很重要：</p><p>1.如果加载列表页，二级页面对一级的列表页面内容有修改，则以及列表函数应该在onShow中加载，否则可以选择onLoad。</p><p>2.如果从一个页面携带参数跳转到另外一个页面，在另一个页面获取参数的方式： onLoad(options){ console.log(options.xxx) },这些参数都挂在在options.</p><p>总结一下 1：在一些数据变化较少的时候我们用onload 2：像这些order订单列表数据变化及时性我们用的是onshow;</p><p>总结： onLoad先于onShow执行 onLoad页面的整个生命周期里，只执行一次 onShow页面的整个生命周期里，可执行多次，即每次显示都会执行 获取参数并且只请求一次的事件放在 onLoad 里。 当前页面需要时时刷数据的请求多次的事件放在 onShow 里。</p>',10)],t={},i=(0,n(3744).Z)(t,[["render",function(o,e){return(0,a.wg)(),(0,a.iD)("div",null,d)}]])},3744:(o,e)=>{e.Z=(o,e)=>{const n=o.__vccOpts||o;for(const[o,a]of e)n[o]=a;return n}}}]);