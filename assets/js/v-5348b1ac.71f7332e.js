"use strict";(self.webpackChunkandroid_docs=self.webpackChunkandroid_docs||[]).push([[2779],{164:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-5348b1ac","path":"/dart/file-operation.html","title":"标准输入输出流","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"写文件","slug":"写文件","link":"#写文件","children":[]},{"level":2,"title":"读文件","slug":"读文件","link":"#读文件","children":[]},{"level":2,"title":"文件的其他操作","slug":"文件的其他操作","link":"#文件的其他操作","children":[]}],"git":{"createdTime":1659917471000,"updatedTime":1659917471000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.03,"words":909},"filePathRelative":"dart/file-operation.md","localizedDate":"2022年8月8日","excerpt":""}')},9747:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6252);const e=[(0,t.uE)('<h1 id="标准输入输出流" tabindex="-1"><a class="header-anchor" href="#标准输入输出流" aria-hidden="true">#</a> 标准输入输出流</h1><ul><li><code>stdin</code></li><li><code>stdout</code></li><li><code>stderr</code></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 导入io包</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 向标准输出流写字符串</span>\n  stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;root\\$:&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 从标准输入流读取一行字符串</span>\n  <span class="token keyword">var</span> input <span class="token operator">=</span> stdin<span class="token punctuation">.</span><span class="token function">readLineSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 带换行符的写数据</span>\n  stdout<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;input data:</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">input</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 向标准错误流写数据</span>\n  stderr<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;has not error&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>stdin</code>除了可以使用<code>readLineSync</code>读一行字符串，还可以使用<code>readByteSync</code>读取一个字节。</p><h1 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h1><h2 id="写文件" tabindex="-1"><a class="header-anchor" href="#写文件" aria-hidden="true">#</a> 写文件</h2><p>一种简便的操作方式，无需手动关闭文件，文件写入完成后会自动关闭</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token comment">// 创建文件</span>\n  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;The easiest way to write text to a file is to create a File&#39;</span></span><span class="token punctuation">;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 向文件写入字符串</span>\n    <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">writeAsString</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Data written.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>writeAsString</code>原型</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> <span class="token function">writeAsString</span><span class="token punctuation">(</span><span class="token class-name">String</span> contents<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span><span class="token class-name">FileMode</span> mode<span class="token punctuation">:</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>write<span class="token punctuation">,</span>\n      <span class="token class-name">Encoding</span> encoding<span class="token punctuation">:</span> utf8<span class="token punctuation">,</span>\n      bool flush<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>mode</code> 文件模式，这里默认为写模式</li><li><code>encoding</code> 字符编码，默认为utf-8</li><li><code>flush</code> 是否立刻刷新缓存，默认为false</li></ul><p>文件模式<code>FileMode</code>的常量</p><table><thead><tr><th style="text-align:left;">常量值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">read</td><td style="text-align:left;">只读模式</td></tr><tr><td style="text-align:left;">write</td><td style="text-align:left;">可读可写模式，如果文件存在则会覆盖</td></tr><tr><td style="text-align:left;">append</td><td style="text-align:left;">追加模式，可读可写，文件存在则往末尾追加</td></tr><tr><td style="text-align:left;">writeOnly</td><td style="text-align:left;">只写模式</td></tr><tr><td style="text-align:left;">writeOnlyAppend</td><td style="text-align:left;">只写模式下的追加模式，不可读</td></tr></tbody></table><p>除了<code>writeAsString</code>方法外，还可以使用<code>writeAsBytes</code>写入一个字节列表。需要注意的是，这两个方法都是异步执行的，返回值都是<code>Future</code>，如果有必要，也可以使用同步方法执行写入操作</p><ul><li><code>writeAsStringSync</code></li><li><code>writeAsBytesSync</code></li></ul><p>如需要更灵活的控制，可以使用如下方式操作文件，但是需要手动关闭文件</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token comment">// 创建文件</span>\n  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 文件模式设置为追加</span>\n  <span class="token class-name">IOSink</span> isk <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span>mode<span class="token punctuation">:</span> <span class="token class-name">FileMode</span><span class="token punctuation">.</span>append<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 多次写入</span>\n  isk<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;A woman is like a tea bag&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  isk<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;you never know how strong it is until it\\&#39;s in hot water.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  isk<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;-Eleanor Roosevelt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> isk<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Done!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读文件" tabindex="-1"><a class="header-anchor" href="#读文件" aria-hidden="true">#</a> 读文件</h2><p>简便的方式</p><ul><li><code>readAsBytes</code></li><li><code>readAsBytesSync</code></li><li><code>readAsString</code></li><li><code>readAsStringSync</code></li><li><code>readAsLines</code></li><li><code>readAsLinesSync</code></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">try</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">readAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种更低级别的方式</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:convert&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// LineSplitter Dart语言封装的换行符，此处将文本按行分割</span>\n    <span class="token class-name">Stream</span> lines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>utf8<span class="token punctuation">.</span>decoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">LineSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> line <span class="token keyword">in</span> lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件的其他操作" tabindex="-1"><a class="header-anchor" href="#文件的其他操作" aria-hidden="true">#</a> 文件的其他操作</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 判断文件是否存在</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;文件存在&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;文件不存在&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 复制文件</span>\n  <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;test-1.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 修改文件名。当传入不同路径时，可用来移动文件</span>\n  <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;test-2.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token comment">// 获取文件 size</span>\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的，这些方法还有一个带<code>Sync</code>后缀的同步版本方法，例如<code>copySync</code>、<code>renameSync</code>等。</p><p>要获取文件更多的信息，还可以使用<code>File</code>等多个类的超类<code>FileSystemEntity</code>来操作</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">{</span>\n  <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;test.txt&#39;</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 判断路径是否是文件夹</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">await</span> <span class="token class-name">FileSystemEntity</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">path</span></span><span class="token string"> is not a directory&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n\n <span class="token class-name">Directory</span> dir <span class="token operator">=</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&#39;D:\\workspace\\dart_space\\Tutorial&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token comment">// 目录是否存在</span>\n <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">await</span> dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">// 从目录的list方法获取FileSystemEntity对象</span>\n   <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemEntity</span><span class="token punctuation">&gt;</span></span> fse <span class="token operator">=</span> <span class="token keyword">await</span> dir<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemEntity</span> entity <span class="token keyword">in</span> fse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span>entity <span class="token operator">is</span> <span class="token class-name">File</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;entity is file&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n\n     <span class="token comment">// 打印文件信息</span>\n     <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> entity<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token comment">// 删除</span>\n     <span class="token keyword">await</span> entity<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n   <span class="token comment">// 不存在则创建。recursive为true时，创建路径上所有不存在的目录</span>\n   <span class="token keyword">await</span> dir<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>recursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需注意，<code>delete</code>中包含一个可选的参数，原型<code>Future&lt;FileSystemEntity&gt; delete({bool recursive: false})</code>，<code>recursive</code>默认为false，当删除目录时，目录必须为空才能删除；当<code>recursive</code>设置为true时，将删除目录下的所有子目录及文件。</p>',29)],p={},c=(0,a(3744).Z)(p,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);