"use strict";(self.webpackChunkandroid_docs=self.webpackChunkandroid_docs||[]).push([[9002],{6635:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-29f65aac","path":"/flutter/functions.html","title":"一些常用操作","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"解析json","slug":"解析json","link":"#解析json","children":[{"level":3,"title":"json字符转dart对象","slug":"json字符转dart对象","link":"#json字符转dart对象","children":[]}]}],"git":{"createdTime":1659917471000,"updatedTime":1659917471000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"flutter/functions.md","localizedDate":"2022年8月8日","excerpt":""}')},5885:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var e=a(6252);const t=[(0,e.uE)('<h1 id="一些常用操作" tabindex="-1"><a class="header-anchor" href="#一些常用操作" aria-hidden="true">#</a> 一些常用操作</h1><h2 id="解析json" tabindex="-1"><a class="header-anchor" href="#解析json" aria-hidden="true">#</a> 解析json</h2><h3 id="json字符转dart对象" tabindex="-1"><a class="header-anchor" href="#json字符转dart对象" aria-hidden="true">#</a> json字符转dart对象</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:json_annotation/json_annotation.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">/// This allows the `User` class to access private members in</span>\n<span class="token comment">/// the generated file. The value for this is *.g.dart, where</span>\n<span class="token comment">/// the star denotes the source file name.</span>\n<span class="token keyword">part</span> <span class="token string-literal"><span class="token string">&#39;user.g.dart&#39;</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">/// An annotation for the code generator to know that this class needs the</span>\n<span class="token comment">/// JSON serialization logic to be generated.</span>\n<span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n  <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n\n  <span class="token comment">/// A necessary factory constructor for creating a new User instance</span>\n  <span class="token comment">/// from a map. Pass the map to the generated `_$UserFromJson()` constructor.</span>\n  <span class="token comment">/// The constructor is named after the source class, in this case, User.</span>\n  <span class="token keyword">factory</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">/// `toJson` is the convention for a class to declare support for serialization</span>\n  <span class="token comment">/// to JSON. The implementation simply calls the private, generated</span>\n  <span class="token comment">/// helper method `_$UserToJson`.</span>\n  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _$<span class="token class-name">UserToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>flutter pub run build_runner <span class="token function">watch</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>json数组转dart对象</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span> responseJson <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CardBean</span><span class="token punctuation">&gt;</span></span> cardbeanList <span class="token operator">=</span> responseJson<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CardBean</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">CardBean</span> cardBean <span class="token operator">=</span> cardbeanList<span class="token punctuation">.</span>first<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8)],o={},p=(0,a(3744).Z)(o,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);